%{

open FunWithFlags.FunDB.SQL.AST

type ParsedValueExpr = ValueExpr<ColumnRef>

%}

// Atoms
%token <int> INT
%token <string> ID
%token <string> QUOTED_ID
%token <string> STRING
%token <bool> BOOL
%token NULL

// Symbols
%token DOUBLE_COLON
%token LEFT_PAREN
%token RIGHT_PAREN
%token LEFT_BRACKET
%token RIGHT_BRACKET
%token COMMA
%token DOT
%token EQ
%token NOT_EQ
%token AT
%token LESS
%token GREATER
%token LESS_EQ
%token GREATER_EQ

// Keywords
%token AND
%token OR
%token LIKE
%token IN
%token IS
%token NOT

// Misc
%token EOF

%left OR
%left AND
%right NOT
%right EQ NOT_EQ
%nonassoc LESS GREATER
%nonassoc LIKE
%nonassoc IN
%left LESS_EQ GREATER_EQ
%nonassoc IS
%left DOUBLE_COLON
%left DOT

%start valueExpr
%type <ParsedValueExpr> valueExpr
%start valueType
%type <DBValueType> valueType
%start schemaObject
%type <SchemaObject> schemaObject

%%

// Entry points
valueExpr : ValueExpr EOF { $1 }
valueType : ValueType EOF { $1 }
schemaObject : SchemaObject EOF { $1 }

// Expressions

ValueExpr:
  | ValueExpr AND ValueExpr                       { VEAnd ($1, $3) }
  | ValueExpr OR ValueExpr                        { VEOr ($1, $3) }
  | ValueExpr EQ ValueExpr                        { VEEq ($1, $3) }
  | ValueExpr NOT_EQ ValueExpr                    { VENotEq ($1, $3) }
  | ValueExpr LIKE ValueExpr                      { VELike ($1, $3) }
  | ValueExpr NOT LIKE ValueExpr                  { VENotLike ($1, $4) }
  | ValueExpr IN InExpr                           { VEIn ($1, $3) }
  | ValueExpr NOT IN InExpr                       { VENotIn ($1, $4) }
  | ValueExpr IS NULL                             { VEIsNull $1 }
  | ValueExpr IS NOT NULL                         { VEIsNotNull $1 }
  | ValueExpr LESS ValueExpr                      { VELess ($1, $3) }
  | ValueExpr LESS_EQ ValueExpr                   { VELessEq ($1, $3) }
  | ValueExpr GREATER ValueExpr                   { VEGreater ($1, $3) }
  | ValueExpr GREATER_EQ ValueExpr                { VEGreaterEq ($1, $3) }
  | ValueExpr DOUBLE_COLON ValueType              { VECast ($1, $3) }
  | Name LEFT_PAREN FunctionArguments RIGHT_PAREN { VEFunc ($1, $3) }
  | ColumnRef                                     { VEColumn $1 }
  | Value                                         { VEValue $1 }
  | LEFT_PAREN ValueExpr RIGHT_PAREN              { $2 }

InList:
  | ValueExpr              { [ $1 ] }
  | ValueExpr COMMA InList { $1 :: $3 }

InExpr:
  | LEFT_PAREN InList RIGHT_PAREN { List.toArray $2 }

FunctionArguments:
  |                           { [||] }
  | FunctionArgumentsNonEmpty { List.toArray $1 }

FunctionArgumentsNonEmpty:
  | ValueExpr                                 { [ $1 ] }
  | ValueExpr COMMA FunctionArgumentsNonEmpty { $1 :: $3 }

ColumnRef:
  | Name DOT Name DOT Name { { maybeTable = Some { schema = Some $1; name = $3 }; name = $5 } }
  | Name DOT Name          { { maybeTable = Some { schema = None; name = $1 }; name = $3 } }
  | Name                   { { maybeTable = None; name = $1 } }

NameString:
  | ID        { $1 }
  | QUOTED_ID { $1 }
  | AND       { "and" }
  | OR        { "or" }
  | LIKE      { "like" }
  | IN        { "in" }

Name:
  | NameString { SQLName $1 }

ArrayDim:
  | LEFT_BRACKET RIGHT_BRACKET     { () }
  | LEFT_BRACKET INT RIGHT_BRACKET { () }

ArrayDims:
  | ArrayDim           { () }
  | ArrayDim ArrayDims { () }

ValueType:
  | ScalarType ArrayDims { VTArray $1 }
  | ScalarType           { VTScalar $1 }

ScalarType:
  | ScalarTypeParts { SQLName (String.concat " " $1) }
  | QUOTED_ID       { SQLName $1 }

ScalarTypeParts:
  | ID ScalarTypeParts { $1 :: $2 }
  | ID                 { [ $1 ] }

Value:
  | INT    { VInt $1 }
  | STRING { VString $1 }
  | BOOL   { VBool $1 }
  | NULL   { VNull }

SchemaObject:
  | Name DOT Name { { schema = Some $1; name = $3 } }
  | Name          { { schema = None; name = $1 } }
