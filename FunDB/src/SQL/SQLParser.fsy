%{

open FunWithFlags.FunDB.SQL.AST

%}

// Atoms
%token <int> INT
%token <decimal> DECIMAL
%token <string> ID
%token <string> QUOTED_ID
%token <string> STRING
%token <bool> BOOL
%token NULL

// Symbols
%token DOUBLE_COLON
%token LEFT_PAREN
%token RIGHT_PAREN
%token LEFT_BRACKET
%token RIGHT_BRACKET
%token COMMA
%token DOT
%token EQ
%token NOT_EQ
%token AT
%token LESS
%token GREATER
%token LESS_EQ
%token GREATER_EQ
%token CONCAT

// Keywords
%token AND
%token OR
%token LIKE
%token IN
%token IS
%token NOT
%token CASE
%token WHEN
%token THEN
%token ELSE
%token END
%token COALESCE

// Misc
%token EOF

%left OR
%left AND
%right NOT
%right EQ
%nonassoc LESS GREATER
%nonassoc LIKE
%nonassoc IN
%left NOT_EQ LESS_EQ GREATER_EQ CONCAT
%nonassoc IS
%left DOUBLE_COLON
%left DOT

%start valueExpr
%type <ValueExpr> valueExpr
%start valueType
%type <DBValueType> valueType
%start schemaObject
%type <SchemaObject> schemaObject

%%

// Entry points
valueExpr : ValueExpr EOF { $1 }
valueType : ValueType EOF { $1 }
schemaObject : SchemaObject EOF { $1 }

// Expressions

ValueExpr:
  | ValueExpr OR ValueExpr  { VEOr ($1, $3) }
  | ValueExpr AND ValueExpr { VEAnd ($1, $3) }
  | NOT ValueExpr           { VENot $2 }
  | ValueExpr EQ ValueExpr  { VEEq ($1, $3) }
  | ValueExprLess           { $1 }

ValueExprLess:
  | ValueExprMisc LESS ValueExprMisc      { VELess ($1, $3) }
  | ValueExprMisc GREATER ValueExprMisc   { VEGreater ($1, $3) }
  | ValueExprMisc LIKE ValueExprMisc      { VELike ($1, $3) }
  | ValueExprMisc NOT LIKE ValueExprMisc  { VENotLike ($1, $4) }
  | ValueExprMisc IN NonEmptyExprList     { VEIn ($1, $3) }
  | ValueExprMisc NOT IN NonEmptyExprList { VENotIn ($1, $4) }
  | ValueExprMisc                         { $1 }

ValueExprMisc:
  | ValueExprMisc CONCAT ValueExprMisc     { VEConcat ($1, $3) }
  | ValueExprMisc NOT_EQ ValueExprMisc     { VENotEq ($1, $3) }
  | ValueExprMisc LESS_EQ ValueExprMisc    { VELessEq ($1, $3) }
  | ValueExprMisc GREATER_EQ ValueExprMisc { VEGreaterEq ($1, $3) }
  | ValueExprMisc IS NULL                  { VEIsNull $1 }
  | ValueExprMisc IS NOT NULL              { VEIsNotNull $1 }
  | ValueExprMisc DOUBLE_COLON ValueType   { VECast ($1, $3) }
  | COALESCE NonEmptyExprList              { VECoalesce $2 }
  | CaseExpr                               { $1 }
  | Name ExprList                          { VEFunc ($1, $2) }
  | ColumnRef                              { VEColumn $1 }
  | Value                                  { VEValue $1 }
  | LEFT_PAREN ValueExpr RIGHT_PAREN       { $2 }

NonEmptyExprs:
  | ValueExpr                     { [ $1 ] }
  | ValueExpr COMMA NonEmptyExprs { $1 :: $3 }

NonEmptyExprList:
  | LEFT_PAREN NonEmptyExprs RIGHT_PAREN { List.toArray $2 }

ExprList:
  | LEFT_PAREN RIGHT_PAREN               { [||] }
  | LEFT_PAREN NonEmptyExprs RIGHT_PAREN { List.toArray $2 }

CaseExpr:
  | CASE CaseWhenList CaseElse END { VECase (List.toArray $2, $3) }

CaseWhenList:
  | WHEN ValueExpr THEN ValueExpr CaseWhenList { ($2, $4) :: $5 }
  | WHEN ValueExpr THEN ValueExpr              { [($2, $4)] }

CaseElse:
  |                { None }
  | ELSE ValueExpr { Some $2 }

ColumnRef:
  | Name DOT Name DOT Name { { table = Some { schema = Some $1; name = $3 }; name = $5 } }
  | Name DOT Name          { { table = Some { schema = None; name = $1 }; name = $3 } }
  | Name                   { { table = None; name = $1 } }

NameString:
  | ID        { $1 }
  | QUOTED_ID { $1 }
  | AND       { "and" }
  | OR        { "or" }
  | LIKE      { "like" }
  | IN        { "in" }

Name:
  | NameString { SQLName $1 }

ArrayDim:
  | LEFT_BRACKET RIGHT_BRACKET     { () }
  | LEFT_BRACKET INT RIGHT_BRACKET { () }

ArrayDims:
  | ArrayDim           { () }
  | ArrayDim ArrayDims { () }

ValueType:
  | ScalarType ArrayDims { VTArray $1 }
  | ScalarType           { VTScalar $1 }

ScalarType:
  | ScalarTypeParts { SQLName (String.concat " " $1) }
  | QUOTED_ID       { SQLName $1 }

ScalarTypeParts:
  | ID ScalarTypeParts { $1 :: $2 }
  | ID                 { [ $1 ] }

Value:
  | INT     { VInt $1 }
  | DECIMAL { VDecimal $1 }
  | STRING  { VString $1 }
  | BOOL    { VBool $1 }
  | NULL    { VNull }

SchemaObject:
  | Name DOT Name { { schema = Some $1; name = $3 } }
  | Name          { { schema = None; name = $1 } }
