%{

open FunWithFlags.FunDB.SQL.AST

%}

// Atoms
%token <int> INT
%token <decimal> DECIMAL
%token <string> ID
%token <string> QUOTED_ID
%token <string> STRING
%token <bool> BOOL
%token NULL

// Symbols
%token DOUBLE_COLON
%token LEFT_PAREN
%token RIGHT_PAREN
%token LEFT_BRACKET
%token RIGHT_BRACKET
%token COMMA
%token DOT
%token EQ
%token NOT_EQ
%token AT
%token LESS
%token GREATER
%token LESS_EQ
%token GREATER_EQ
%token CONCAT
%token LIKE_OP
%token NOT_LIKE_OP
%token ILIKE_OP
%token NOT_ILIKE_OP
%token ARROW
%token PLUS
%token MINUS
%token MULTIPLY
%token DIVIDE
%token MATCH_REGEX
%token MATCH_REGEX_CI
%token NOT_MATCH_REGEX
%token NOT_MATCH_REGEX_CI

// Keywords
%token AND
%token OR
%token LIKE
%token ILIKE
%token SIMILAR
%token IN
%token IS
%token TO
%token NOT
%token CASE
%token WHEN
%token THEN
%token ELSE
%token END
%token COALESCE
%token GREATEST
%token LEAST
%token ARRAY
%token ANY
%token SOME
%token ALL
%token DISTINCT
%token FROM

// Misc
%token EOF

%left OR
%left AND
%right NOT
%right EQ
%nonassoc LESS GREATER
%nonassoc LIKE ILIKE LIKE_OP NOT_LIKE_OP ILIKE_OP NOT_ILIKE_OP
%nonassoc IN
%left NOT_EQ LESS_EQ GREATER_EQ CONCAT ARROW
%nonassoc IS FROM
%left PLUS MINUS
%left MULTIPLY DIVIDE
%left DOUBLE_COLON
%left DOT

%start valueExpr
%type <ValueExpr> valueExpr
%start valueType
%type <DBValueType> valueType
%start schemaObject
%type <SchemaObject> schemaObject

%%

// Entry points
valueExpr : ValueExpr EOF { $1 }
valueType : ValueType EOF { $1 }
schemaObject : SchemaObject EOF { $1 }

// Expressions

ValueExpr:
    | ValueExpr OR ValueExpr                            { VEOr ($1, $3) }
    | ValueExpr AND ValueExpr                           { VEAnd ($1, $3) }
    | NOT ValueExpr                                     { VENot $2 }
    | ValueExpr EQ ValueExpr                            { VEEq ($1, $3) }
    | ValueExpr EQ Any LEFT_PAREN ValueExpr RIGHT_PAREN { VEEqAny ($1, $5) }
    | ValueExprLess                                     { $1 }

ValueExprLess:
    | ValueExprIs LESS ValueExprIs               { VELess ($1, $3) }
    | ValueExprIs GREATER ValueExprIs            { VEGreater ($1, $3) }
    | ValueExprIs LIKE ValueExprIs               { VELike ($1, $3) }
    | ValueExprIs NOT LIKE ValueExprIs           { VENotLike ($1, $4) }
    | ValueExprIs LIKE_OP ValueExprIs            { VELike ($1, $3) }
    | ValueExprIs NOT_LIKE_OP ValueExprIs        { VENotLike ($1, $3) }
    | ValueExprIs ILIKE ValueExprIs              { VEILike ($1, $3) }
    | ValueExprIs NOT ILIKE ValueExprIs          { VENotILike ($1, $4) }
    | ValueExprIs ILIKE_OP ValueExprIs           { VEILike ($1, $3) }
    | ValueExprIs NOT_ILIKE_OP ValueExprIs       { VENotILike ($1, $3) }
    | ValueExprIs SIMILAR TO ValueExprIs         { VESimilarTo ($1, $4) }
    | ValueExprIs NOT SIMILAR TO ValueExprIs     { VENotSimilarTo ($1, $5) }
    | ValueExprIs MATCH_REGEX ValueExprIs        { VEMatchRegex ($1, $3) }
    | ValueExprIs MATCH_REGEX_CI ValueExprIs     { VEMatchRegexCI ($1, $3) }
    | ValueExprIs NOT_MATCH_REGEX ValueExprIs    { VENotMatchRegex ($1, $3) }
    | ValueExprIs NOT_MATCH_REGEX_CI ValueExprIs { VENotMatchRegexCI ($1, $3) }
    | ValueExprIs IN ParenedNonEmptyExprList     { VEIn ($1, $3) }
    | ValueExprIs NOT IN ParenedNonEmptyExprList { VENotIn ($1, $4) }
    | ValueExprIs                                { $1 }

ValueExprIs:
    | ValueExprMisc IS NULL                            { VEIsNull $1 }
    | ValueExprMisc IS NOT NULL                        { VEIsNotNull $1 }
    | ValueExprMisc IS DISTINCT FROM ValueExprMisc     { VEDistinct ($1, $5) }
    | ValueExprMisc IS NOT DISTINCT FROM ValueExprMisc { VENotDistinct ($1, $6) }
    | ValueExprMisc                                    { $1 }

ValueExprMisc:
    | ValueExprMisc CONCAT ValueExprMisc                        { VEConcat ($1, $3) }
    | ValueExprMisc ARROW ValueExprMisc                         { VEJsonArrow ($1, $3) }
    | ValueExprMisc PLUS ValueExprMisc                          { VEPlus ($1, $3) }
    | ValueExprMisc MINUS ValueExprMisc                         { VEMinus ($1, $3) }
    | ValueExprMisc MULTIPLY ValueExprMisc                      { VEMultiply ($1, $3) }
    | ValueExprMisc DIVIDE ValueExprMisc                        { VEDivide ($1, $3) }
    | ValueExprMisc NOT_EQ ValueExprMisc                        { VENotEq ($1, $3) }
    | ValueExprMisc NOT_EQ ALL LEFT_PAREN ValueExpr RIGHT_PAREN { VENotEqAll ($1, $5) }
    | ValueExprMisc LESS_EQ ValueExprMisc                       { VELessEq ($1, $3) }
    | ValueExprMisc GREATER_EQ ValueExprMisc                    { VEGreaterEq ($1, $3) }
    | ValueExprMisc DOUBLE_COLON ValueType                      { VECast ($1, $3) }
    | COALESCE ParenedNonEmptyExprList                          { VECoalesce $2 }
    | GREATEST ParenedNonEmptyExprList                          { VEGreatest $2 }
    | LEAST ParenedNonEmptyExprList                             { VELeast $2 }
    | CaseExpr                                                  { $1 }
    | Name ParenedExprList                                      { VEFunc ($1, $2) }
    | ColumnRef                                                 { VEColumn $1 }
    | Value                                                     { VEValue $1 }
    | ARRAY LEFT_BRACKET ExprList RIGHT_BRACKET                 { VEArray $3 }
    | LEFT_PAREN ValueExpr RIGHT_PAREN                          { $2 }

Any:
    | ANY  { () }
    | SOME { () }

NonEmptyExprs:
    | ValueExpr                     { [ $1 ] }
    | ValueExpr COMMA NonEmptyExprs { $1 :: $3 }

NonEmptyExprList:
    | NonEmptyExprs { List.toArray $1 }

ParenedNonEmptyExprList:
    | LEFT_PAREN NonEmptyExprList RIGHT_PAREN { $2 }

ExprList:
    |                  { [||] }
    | NonEmptyExprList { $1 }

ParenedExprList:
    | LEFT_PAREN ExprList RIGHT_PAREN { $2 }

CaseExpr:
    | CASE CaseWhenList CaseElse END { VECase (List.toArray $2, $3) }

CaseWhenList:
    | WHEN ValueExpr THEN ValueExpr CaseWhenList { ($2, $4) :: $5 }
    | WHEN ValueExpr THEN ValueExpr              { [($2, $4)] }

CaseElse:
    |                { None }
    | ELSE ValueExpr { Some $2 }

ColumnRef:
    | Name DOT Name DOT Name { { table = Some { schema = Some $1; name = $3 }; name = $5 } }
    | Name DOT Name          { { table = Some { schema = None; name = $1 }; name = $3 } }
    | Name                   { { table = None; name = $1 } }

NameString:
    | ID        { $1 }
    | QUOTED_ID { $1 }
    | AND       { "and" }
    | OR        { "or" }
    | LIKE      { "like" }
    | IN        { "in" }

Name:
     NameString { SQLName $1 }

ArrayDim:
    | LEFT_BRACKET RIGHT_BRACKET     { () }
    | LEFT_BRACKET INT RIGHT_BRACKET { () }

ArrayDims:
    | ArrayDim           { () }
    | ArrayDim ArrayDims { () }

ValueType:
    | ScalarType ArrayDims { VTArray $1 }
    | ScalarType           { VTScalar $1 }

ScalarType:
    | ScalarTypeParts { SQLRawString (String.concat " " $1) }
    | QUOTED_ID       { SQLRawString $1 }

ScalarTypeParts:
    | ID ScalarTypeParts { $1 :: $2 }
    | ID                 { [ $1 ] }

Value:
    | INT           { VInt $1 }
    | DECIMAL       { VDecimal $1 }
    | PLUS INT      { VInt $2 }
    | PLUS DECIMAL  { VDecimal $2 }
    | MINUS INT     { VInt (-$2) }
    | MINUS DECIMAL { VDecimal (-$2) }
    | STRING        { VString $1 }
    | BOOL          { VBool $1 }
    | NULL          { VNull }

SchemaObject:
    | Name DOT Name { { schema = Some $1; name = $3 } }
    | Name          { { schema = None; name = $1 } }
