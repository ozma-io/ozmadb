%{

open FunWithFlags.FunDB.SQL.AST

%}

// Atoms
%token <int> INT
%token <decimal> DECIMAL
%token <string> ID
%token <string> QUOTED_ID
%token <string> STRING
%token <bool> BOOL
%token NULL

// Symbols
%token DOUBLE_COLON
%token LEFT_PAREN
%token RIGHT_PAREN
%token LEFT_BRACKET
%token RIGHT_BRACKET
%token COMMA
%token DOT
%token EQ
%token NOT_EQ
%token AT
%token LESS
%token GREATER
%token LESS_EQ
%token GREATER_EQ
%token CONCAT
%token LIKE_OP
%token NOT_LIKE_OP
%token ILIKE_OP
%token NOT_ILIKE_OP
%token ARROW
%token DOUBLE_ARROW
%token PLUS
%token MINUS
%token MULTIPLY
%token DIVIDE
%token MATCH_REGEX
%token MATCH_REGEX_CI
%token NOT_MATCH_REGEX
%token NOT_MATCH_REGEX_CI

// Keywords
%token AND
%token OR
%token LIKE
%token ILIKE
%token SIMILAR
%token IN
%token IS
%token TO
%token NOT
%token CASE
%token WHEN
%token THEN
%token ELSE
%token END
%token COALESCE
%token GREATEST
%token LEAST
%token ARRAY
%token ANY
%token SOME
%token ALL
%token DISTINCT
%token FROM

// Misc
%token EOF

%left OR
%left AND
%right NOT
// Non-assoc doesn't work correctly in F#: https://github.com/fsprojects/FsLexYacc/issues/39
%nonassoc IS
%nonassoc EQ NOT_EQ LESS_EQ LESS GREATER GREATER_EQ
%nonassoc IN LIKE ILIKE SIMILAR
%left LIKE_OP NOT_LIKE_OP ILIKE_OP NOT_ILIKE_OP MATCH_REGEX MATCH_REGEX_CI NOT_MATCH_REGEX NOT_MATCH_REGEX_CI CONCAT ARROW DOUBLE_ARROW
%left PLUS MINUS
%left MULTIPLY DIVIDE
%left DOUBLE_COLON
%left DOT

%start valueExpr
%type <ValueExpr> valueExpr
%start valueExprList
%type <ValueExpr[]> valueExprList
%start valueType
%type <DBValueType> valueType
%start schemaObject
%type <SchemaObject> schemaObject

%%

// Entry points
valueExpr : ValueExpr EOF { $1 }
valueExprList : NonEmptyExprList EOF { $1 }
valueType : ValueType EOF { $1 }
schemaObject : SchemaObject EOF { $1 }

// Expressions

// This trick is to at least avoid specifying rules for ANY and ALL separately. One cannot just non-terminal like this:
//
// | ValueExpr BoolBinaryOp Any LEFT_PAREN ValueExpr RIGHT_PAREN { VEAny ($1, $2, $5) }
//
// Because it creates a shift/reduce conflict per operator.

AnyAllOp:
    | Any LEFT_PAREN ValueExpr RIGHT_PAREN { fun op a -> VEAny (a, op, $3) }
    | ALL LEFT_PAREN ValueExpr RIGHT_PAREN { fun op a -> VEAll (a, op, $3) }

Any:
    | ANY  { () }
    | SOME { () }

ValueExpr:
    | ValueExpr OR ValueExpr  { VEOr ($1, $3) }
    | ValueExpr AND ValueExpr { VEAnd ($1, $3) }
    | NOT ValueExpr           { VENot $2 }
    | ValueExprIs             { $1 }

ValueExprIs:
    | ValueExprEq IS NULL                          { VEIsNull $1 }
    | ValueExprEq IS NOT NULL                      { VEIsNotNull $1 }
    | ValueExprEq IS DISTINCT FROM ValueExprEq     { VEDistinct ($1, $5) }
    | ValueExprEq IS NOT DISTINCT FROM ValueExprEq { VENotDistinct ($1, $6) }
    | ValueExprEq                                  { $1 }

ValueExprEq:
    | ValueExprLike EQ ValueExprLikeOp2         { $3 BOEq $1 }
    | ValueExprLike LESS ValueExprLikeOp2       { $3 BOLess $1 }
    | ValueExprLike GREATER ValueExprLikeOp2    { $3 BOGreater $1 }
    | ValueExprLike NOT_EQ ValueExprLikeOp2     { $3 BONotEq $1 }
    | ValueExprLike LESS_EQ ValueExprLikeOp2    { $3 BOLessEq $1 }
    | ValueExprLike GREATER_EQ ValueExprLikeOp2 { $3 BOGreaterEq $1 }
    | ValueExprLike                             { $1 }

ValueExprLikeOp2:
    | ValueExprLike { fun op a -> VEBinaryOp (a, op, $1) }
    | AnyAllOp      { $1 }

ValueExprLike:
    | ValueExprMisc LIKE ValueExprMisc           { VEBinaryOp ($1, BOLike, $3) }
    | ValueExprMisc NOT LIKE ValueExprMisc       { VEBinaryOp ($1, BONotLike, $4) }
    | ValueExprMisc ILIKE ValueExprMisc          { VEBinaryOp ($1, BOILike, $3) }
    | ValueExprMisc NOT ILIKE ValueExprMisc      { VEBinaryOp ($1, BONotILike, $4) }
    | ValueExprMisc SIMILAR TO ValueExprMisc     { VESimilarTo ($1, $4) }
    | ValueExprMisc NOT SIMILAR TO ValueExprMisc { VENotSimilarTo ($1, $5) }
    | ValueExprMisc                              { $1 }

ValueExprMisc:
    | ValueExprMisc LIKE_OP ValueExprMisc            { VEBinaryOp ($1, BOLike, $3) }
    | ValueExprMisc NOT_LIKE_OP ValueExprMisc        { VEBinaryOp ($1, BONotLike, $3) }
    | ValueExprMisc ILIKE_OP ValueExprMisc           { VEBinaryOp ($1, BOILike, $3) }
    | ValueExprMisc NOT_ILIKE_OP ValueExprMisc       { VEBinaryOp ($1, BONotILike, $3) }
    | ValueExprMisc MATCH_REGEX ValueExprMisc        { VEBinaryOp ($1, BOMatchRegex, $3) }
    | ValueExprMisc MATCH_REGEX_CI ValueExprMisc     { VEBinaryOp ($1, BOMatchRegexCI, $3) }
    | ValueExprMisc NOT_MATCH_REGEX ValueExprMisc    { VEBinaryOp ($1, BONotMatchRegex, $3) }
    | ValueExprMisc NOT_MATCH_REGEX_CI ValueExprMisc { VEBinaryOp ($1, BONotMatchRegexCI, $3) }
    | ValueExprMisc CONCAT ValueExprMisc             { VEBinaryOp ($1, BOConcat, $3) }
    | ValueExprMisc ARROW ValueExprMisc              { VEBinaryOp ($1, BOJsonArrow, $3) }
    | ValueExprMisc DOUBLE_ARROW ValueExprMisc       { VEBinaryOp ($1, BOJsonTextArrow, $3) }
    | ValueExprMisc PLUS ValueExprMisc               { VEBinaryOp ($1, BOPlus, $3) }
    | ValueExprMisc MINUS ValueExprMisc              { VEBinaryOp ($1, BOMinus, $3) }
    | ValueExprMisc MULTIPLY ValueExprMisc           { VEBinaryOp ($1, BOMultiply, $3) }
    | ValueExprMisc DIVIDE ValueExprMisc             { VEBinaryOp ($1, BODivide, $3) }

    // Now the same, but for ANY/ALL. I hate this.
    | ValueExprMisc LIKE_OP AnyAllOp                  { $3 BOLike $1 }
    | ValueExprMisc NOT_LIKE_OP AnyAllOp              { $3 BONotLike $1 }
    | ValueExprMisc ILIKE_OP AnyAllOp                 { $3 BOILike $1 }
    | ValueExprMisc NOT_ILIKE_OP AnyAllOp             { $3 BONotILike $1 }
    | ValueExprMisc MATCH_REGEX AnyAllOp              { $3 BOMatchRegex $1 }
    | ValueExprMisc MATCH_REGEX_CI AnyAllOp           { $3 BOMatchRegexCI $1 }
    | ValueExprMisc NOT_MATCH_REGEX AnyAllOp          { $3 BONotMatchRegex $1 }
    | ValueExprMisc NOT_MATCH_REGEX_CI AnyAllOp       { $3 BONotMatchRegexCI $1 }
    | ValueExprMisc CONCAT AnyAllOp                   { $3 BOConcat $1 }
    | ValueExprMisc ARROW AnyAllOp                    { $3 BOJsonArrow $1 }
    | ValueExprMisc DOUBLE_ARROW AnyAllOp             { $3 BOJsonTextArrow $1 }
    | ValueExprMisc PLUS AnyAllOp                     { $3 BOPlus $1 }
    | ValueExprMisc MINUS AnyAllOp                    { $3 BOMinus $1 }
    | ValueExprMisc MULTIPLY AnyAllOp                 { $3 BOMultiply $1 }
    | ValueExprMisc DIVIDE AnyAllOp                   { $3 BODivide $1 }

    | ValueExprMisc IN ParenedNonEmptyExprList        { VEIn ($1, $3) }
    | ValueExprMisc NOT IN ParenedNonEmptyExprList    { VENotIn ($1, $4) }
    | ValueExprMisc DOUBLE_COLON ValueType            { VECast ($1, $3) }
    | COALESCE ParenedNonEmptyExprList                { VESpecialFunc (SFCoalesce, $2) }
    | GREATEST ParenedNonEmptyExprList                { VESpecialFunc (SFGreatest, $2) }
    | LEAST ParenedNonEmptyExprList                   { VESpecialFunc (SFLeast, $2) }
    | CaseExpr                                        { $1 }
    | Name ParenedExprList                            { VEFunc ($1, $2) }
    | ColumnRef                                       { VEColumn $1 }
    | Value                                           { VEValue $1 }
    | ARRAY LEFT_BRACKET ExprList RIGHT_BRACKET       { VEArray $3 }
    | LEFT_PAREN ValueExpr RIGHT_PAREN                { $2 }

NonEmptyExprs:
    | ValueExpr                     { [ $1 ] }
    | ValueExpr COMMA NonEmptyExprs { $1 :: $3 }

NonEmptyExprList:
    | NonEmptyExprs { List.toArray $1 }

ParenedNonEmptyExprList:
    | LEFT_PAREN NonEmptyExprList RIGHT_PAREN { $2 }

ExprList:
    |                  { [||] }
    | NonEmptyExprList { $1 }

ParenedExprList:
    | LEFT_PAREN ExprList RIGHT_PAREN { $2 }

CaseExpr:
    | CASE CaseWhenList CaseElse END { VECase (List.toArray $2, $3) }

CaseWhenList:
    | WHEN ValueExpr THEN ValueExpr CaseWhenList { ($2, $4) :: $5 }
    | WHEN ValueExpr THEN ValueExpr              { [($2, $4)] }

CaseElse:
    |                { None }
    | ELSE ValueExpr { Some $2 }

ColumnRef:
    | Name DOT Name DOT Name { { table = Some { schema = Some $1; name = $3 }; name = $5 } }
    | Name DOT Name          { { table = Some { schema = None; name = $1 }; name = $3 } }
    | Name                   { { table = None; name = $1 } }

Name:
    | ID        { SQLName $1 }
    | QUOTED_ID { SQLName $1 }

ArrayDim:
    | LEFT_BRACKET RIGHT_BRACKET     { () }
    | LEFT_BRACKET INT RIGHT_BRACKET { () }

ArrayDims:
    | ArrayDim           { () }
    | ArrayDim ArrayDims { () }

ValueType:
    | ScalarType ArrayDims { VTArray $1 }
    | ScalarType           { VTScalar $1 }

ScalarType:
    | ScalarTypeParts { SQLRawString (String.concat " " $1) }
    | QUOTED_ID       { SQLRawString $1 }

ScalarTypeParts:
    | ID ScalarTypeParts { $1 :: $2 }
    | ID                 { [ $1 ] }

Value:
    | INT           { VInt $1 }
    | DECIMAL       { VDecimal $1 }
    | PLUS INT      { VInt $2 }
    | PLUS DECIMAL  { VDecimal $2 }
    | MINUS INT     { VInt (-$2) }
    | MINUS DECIMAL { VDecimal (-$2) }
    | STRING        { VString $1 }
    | BOOL          { VBool $1 }
    | NULL          { VNull }

SchemaObject:
    | Name DOT Name { { schema = Some $1; name = $3 } }
    | Name          { { schema = None; name = $1 } }
